<body style="margin:0">
<canvas></canvas>
</body>

<script type="importmap">
{
	"imports": {
		"three": "https://unpkg.com/three@0.157.0/build/three.module.js",
		"three/addons/": "https://unpkg.com/three@0.157.0/examples/jsm/",
		"@lumaai/luma-web": "https://unpkg.com/@lumaai/luma-web@0.2.0/dist/library/luma-web.module.js"
	}
}
</script>
<script type="module">
import { WebGLRenderer, PerspectiveCamera, Scene } from 'three';
import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
import { LumaSplatsThree, LumaSplatsSemantics } from '@lumaai/luma-web';

let canvas = document.querySelector('canvas');

let renderer = new WebGLRenderer({
	canvas: canvas,
	antialias: false,
});

renderer.setSize(window.innerWidth, window.innerHeight, false);

let scene = new Scene();

let camera = new PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
camera.position.z = 2;

// setInterval(()=>console.log(camera.position), 1000)

console.log(LumaSplatsSemantics)

let controls = new OrbitControls(camera, canvas);
controls.autoRotate = true;
controls.autoRotateSpeed = 2;
controls.enableDamping = true;
	
let splat = new LumaSplatsThree({
	source: 'https://lumalabs.ai/capture/3898fd7a-b625-45c7-b7a2-34c67b1a7c2b',
	particleRevealEnabled: true,
	enableThreeShaderIntegration: false,
});
scene.add(splat);
splat.semanticsMask = LumaSplatsSemantics.FOREGROUND;

renderer.setAnimationLoop(() => {
	controls.update();
	renderer.render(scene, camera);
});
</script>
